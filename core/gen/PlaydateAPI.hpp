// Auto-generated Playdate compatible struct definitions (32-bit word size)

#pragma once

#include "../PlaydateTypes.hpp"
#include "Utils.hpp"

#define PLAYDATE_SDK_VERSION "2.6.2"

constexpr int FUNCTION_TABLE_SIZE = 502;

namespace cranked {

class Cranked;

extern NativeFunctionMetadata playdateFunctionTable[FUNCTION_TABLE_SIZE];

int populatePlaydateApiStruct(void *api, Version version);

struct LCDRect_32 {
	int32_t left;
	int32_t right;
	int32_t top;
	int32_t bottom;
};

struct playdate_video_32 {
	cref_t loadVideo;
	cref_t freePlayer;
	cref_t setContext;
	cref_t useScreenContext;
	cref_t renderFrame;
	cref_t getError;
	cref_t getInfo;
	cref_t getContext;
};

struct playdate_graphics_32 {
	cref_t video;
	cref_t clear;
	cref_t setBackgroundColor;
	cref_t setStencil;
	cref_t setDrawMode;
	cref_t setDrawOffset;
	cref_t setClipRect;
	cref_t clearClipRect;
	cref_t setLineCapStyle;
	cref_t setFont;
	cref_t setTextTracking;
	cref_t pushContext;
	cref_t popContext;
	cref_t drawBitmap;
	cref_t tileBitmap;
	cref_t drawLine;
	cref_t fillTriangle;
	cref_t drawRect;
	cref_t fillRect;
	cref_t drawEllipse;
	cref_t fillEllipse;
	cref_t drawScaledBitmap;
	cref_t drawText;
	cref_t newBitmap;
	cref_t freeBitmap;
	cref_t loadBitmap;
	cref_t copyBitmap;
	cref_t loadIntoBitmap;
	cref_t getBitmapData;
	cref_t clearBitmap;
	cref_t rotatedBitmap;
	cref_t newBitmapTable;
	cref_t freeBitmapTable;
	cref_t loadBitmapTable;
	cref_t loadIntoBitmapTable;
	cref_t getTableBitmap;
	cref_t loadFont;
	cref_t getFontPage;
	cref_t getPageGlyph;
	cref_t getGlyphKerning;
	cref_t getTextWidth;
	cref_t getFrame;
	cref_t getDisplayFrame;
	cref_t getDebugBitmap;
	cref_t copyFrameBufferBitmap;
	cref_t markUpdatedRows;
	cref_t display;
	cref_t setColorToPattern;
	cref_t checkMaskCollision;
	cref_t setScreenClipRect;
	cref_t fillPolygon;
	cref_t getFontHeight;
	cref_t getDisplayBufferBitmap;
	cref_t drawRotatedBitmap;
	cref_t setTextLeading;
	cref_t setBitmapMask;
	cref_t getBitmapMask;
	cref_t setStencilImage;
	cref_t makeFontFromData;
	cref_t getTextTracking;
	cref_t setPixel;
	cref_t getBitmapPixel;
	cref_t getBitmapTableInfo;
	cref_t drawTextInRect;
};

struct PDDateTime_32 {
	uint16_t year;
	uint8_t month;
	uint8_t day;
	uint8_t weekday;
	uint8_t hour;
	uint8_t minute;
	uint8_t second;
};

struct playdate_sys_32 {
	cref_t realloc;
	cref_t formatString;
	cref_t logToConsole;
	cref_t error;
	cref_t getLanguage;
	cref_t getCurrentTimeMilliseconds;
	cref_t getSecondsSinceEpoch;
	cref_t drawFPS;
	cref_t setUpdateCallback;
	cref_t getButtonState;
	cref_t setPeripheralsEnabled;
	cref_t getAccelerometer;
	cref_t getCrankChange;
	cref_t getCrankAngle;
	cref_t isCrankDocked;
	cref_t setCrankSoundsDisabled;
	cref_t getFlipped;
	cref_t setAutoLockDisabled;
	cref_t setMenuImage;
	cref_t addMenuItem;
	cref_t addCheckmarkMenuItem;
	cref_t addOptionsMenuItem;
	cref_t removeAllMenuItems;
	cref_t removeMenuItem;
	cref_t getMenuItemValue;
	cref_t setMenuItemValue;
	cref_t getMenuItemTitle;
	cref_t setMenuItemTitle;
	cref_t getMenuItemUserdata;
	cref_t setMenuItemUserdata;
	cref_t getReduceFlashing;
	cref_t getElapsedTime;
	cref_t resetElapsedTime;
	cref_t getBatteryPercentage;
	cref_t getBatteryVoltage;
	cref_t getTimezoneOffset;
	cref_t shouldDisplay24HourTime;
	cref_t convertEpochToDateTime;
	cref_t convertDateTimeToEpoch;
	cref_t clearICache;
	cref_t setButtonCallback;
	cref_t setSerialMessageCallback;
	cref_t vaFormatString;
	cref_t parseString;
};

struct lua_reg_32 {
	cref_t name;
	cref_t func;
};

struct lua_val_32 {
	cref_t name;
	int32_t type;
	union {
		uint32_t intval;
		float floatval;
		cref_t strval;
	} v;
};

struct playdate_lua_32 {
	cref_t addFunction;
	cref_t registerClass;
	cref_t pushFunction;
	cref_t indexMetatable;
	cref_t stop;
	cref_t start;
	cref_t getArgCount;
	cref_t getArgType;
	cref_t argIsNil;
	cref_t getArgBool;
	cref_t getArgInt;
	cref_t getArgFloat;
	cref_t getArgString;
	cref_t getArgBytes;
	cref_t getArgObject;
	cref_t getBitmap;
	cref_t getSprite;
	cref_t pushNil;
	cref_t pushBool;
	cref_t pushInt;
	cref_t pushFloat;
	cref_t pushString;
	cref_t pushBytes;
	cref_t pushBitmap;
	cref_t pushSprite;
	cref_t pushObject;
	cref_t retainObject;
	cref_t releaseObject;
	cref_t setUserValue;
	cref_t getUserValue;
	cref_t callFunction_deprecated;
	cref_t callFunction;
};

struct json_value_32 {
	uint8_t type;
	union {
		int32_t intval;
		float floatval;
		cref_t stringval;
		cref_t arrayval;
		cref_t tableval;
	} data;
};

struct json_decoder_32 {
	cref_t decodeError;
	cref_t willDecodeSublist;
	cref_t shouldDecodeTableValueForKey;
	cref_t didDecodeTableValue;
	cref_t shouldDecodeArrayValueAtIndex;
	cref_t didDecodeArrayValue;
	cref_t didDecodeSublist;
	cref_t userdata;
	int32_t returnString;
	cref_t path;
};

struct json_reader_32 {
	cref_t read;
	cref_t userdata;
};

struct json_encoder_32 {
	cref_t writeStringFunc;
	cref_t userdata;
	int32_t pretty : 1;
	int32_t startedTable : 1;
	int32_t startedArray : 1;
	int32_t depth : 29;
	cref_t startArray;
	cref_t addArrayMember;
	cref_t endArray;
	cref_t startTable;
	cref_t addTableMember;
	cref_t endTable;
	cref_t writeNull;
	cref_t writeFalse;
	cref_t writeTrue;
	cref_t writeInt;
	cref_t writeDouble;
	cref_t writeString;
};

struct playdate_json_32 {
	cref_t initEncoder;
	cref_t decode;
	cref_t decodeString;
};

struct FileStat_32 {
	int32_t isdir;
	uint32_t size;
	int32_t m_year;
	int32_t m_month;
	int32_t m_day;
	int32_t m_hour;
	int32_t m_minute;
	int32_t m_second;
};

struct playdate_file_32 {
	cref_t geterr;
	cref_t listfiles;
	cref_t stat;
	cref_t mkdir;
	cref_t unlink;
	cref_t rename;
	cref_t open;
	cref_t close;
	cref_t read;
	cref_t write;
	cref_t flush;
	cref_t tell;
	cref_t seek;
};

struct PDRect_32 {
	float x;
	float y;
	float width;
	float height;
};

struct CollisionPoint_32 {
	float x;
	float y;
};

struct CollisionVector_32 {
	int32_t x;
	int32_t y;
};

struct SpriteCollisionInfo_32 {
	cref_t sprite;
	cref_t other;
	int8_t responseType;
	uint8_t overlaps;
	float ti;
	CollisionPoint_32 move;
	CollisionVector_32 normal;
	CollisionPoint_32 touch;
	PDRect_32 spriteRect;
	PDRect_32 otherRect;
};

struct SpriteQueryInfo_32 {
	cref_t sprite;
	float ti1;
	float ti2;
	CollisionPoint_32 entryPoint;
	CollisionPoint_32 exitPoint;
};

struct playdate_sprite_32 {
	cref_t setAlwaysRedraw;
	cref_t addDirtyRect;
	cref_t drawSprites;
	cref_t updateAndDrawSprites;
	cref_t newSprite;
	cref_t freeSprite;
	cref_t copy;
	cref_t addSprite;
	cref_t removeSprite;
	cref_t removeSprites;
	cref_t removeAllSprites;
	cref_t getSpriteCount;
	cref_t setBounds;
	cref_t getBounds;
	cref_t moveTo;
	cref_t moveBy;
	cref_t setImage;
	cref_t getImage;
	cref_t setSize;
	cref_t setZIndex;
	cref_t getZIndex;
	cref_t setDrawMode;
	cref_t setImageFlip;
	cref_t getImageFlip;
	cref_t setStencil;
	cref_t setClipRect;
	cref_t clearClipRect;
	cref_t setClipRectsInRange;
	cref_t clearClipRectsInRange;
	cref_t setUpdatesEnabled;
	cref_t updatesEnabled;
	cref_t setCollisionsEnabled;
	cref_t collisionsEnabled;
	cref_t setVisible;
	cref_t isVisible;
	cref_t setOpaque;
	cref_t markDirty;
	cref_t setTag;
	cref_t getTag;
	cref_t setIgnoresDrawOffset;
	cref_t setUpdateFunction;
	cref_t setDrawFunction;
	cref_t getPosition;
	cref_t resetCollisionWorld;
	cref_t setCollideRect;
	cref_t getCollideRect;
	cref_t clearCollideRect;
	cref_t setCollisionResponseFunction;
	cref_t checkCollisions;
	cref_t moveWithCollisions;
	cref_t querySpritesAtPoint;
	cref_t querySpritesInRect;
	cref_t querySpritesAlongLine;
	cref_t querySpriteInfoAlongLine;
	cref_t overlappingSprites;
	cref_t allOverlappingSprites;
	cref_t setStencilPattern;
	cref_t clearStencil;
	cref_t setUserdata;
	cref_t getUserdata;
	cref_t setStencilImage;
	cref_t setCenter;
	cref_t getCenter;
};

struct playdate_sound_source_32 {
	cref_t setVolume;
	cref_t getVolume;
	cref_t isPlaying;
	cref_t setFinishCallback;
};

struct playdate_sound_fileplayer_32 {
	cref_t newPlayer;
	cref_t freePlayer;
	cref_t loadIntoPlayer;
	cref_t setBufferLength;
	cref_t play;
	cref_t isPlaying;
	cref_t pause;
	cref_t stop;
	cref_t setVolume;
	cref_t getVolume;
	cref_t getLength;
	cref_t setOffset;
	cref_t setRate;
	cref_t setLoopRange;
	cref_t didUnderrun;
	cref_t setFinishCallback;
	cref_t setLoopCallback;
	cref_t getOffset;
	cref_t getRate;
	cref_t setStopOnUnderrun;
	cref_t fadeVolume;
	cref_t setMP3StreamSource;
};

struct playdate_sound_sample_32 {
	cref_t newSampleBuffer;
	cref_t loadIntoSample;
	cref_t load;
	cref_t newSampleFromData;
	cref_t getData;
	cref_t freeSample;
	cref_t getLength;
	cref_t decompress;
};

struct playdate_sound_sampleplayer_32 {
	cref_t newPlayer;
	cref_t freePlayer;
	cref_t setSample;
	cref_t play;
	cref_t isPlaying;
	cref_t stop;
	cref_t setVolume;
	cref_t getVolume;
	cref_t getLength;
	cref_t setOffset;
	cref_t setRate;
	cref_t setPlayRange;
	cref_t setFinishCallback;
	cref_t setLoopCallback;
	cref_t getOffset;
	cref_t getRate;
	cref_t setPaused;
};

struct playdate_sound_signal_32 {
	cref_t newSignal;
	cref_t freeSignal;
	cref_t getValue;
	cref_t setValueScale;
	cref_t setValueOffset;
	cref_t newSignalForValue;
};

struct playdate_sound_lfo_32 {
	cref_t newLFO;
	cref_t freeLFO;
	cref_t setType;
	cref_t setRate;
	cref_t setPhase;
	cref_t setCenter;
	cref_t setDepth;
	cref_t setArpeggiation;
	cref_t setFunction;
	cref_t setDelay;
	cref_t setRetrigger;
	cref_t getValue;
	cref_t setGlobal;
	cref_t setStartPhase;
};

struct playdate_sound_envelope_32 {
	cref_t newEnvelope;
	cref_t freeEnvelope;
	cref_t setAttack;
	cref_t setDecay;
	cref_t setSustain;
	cref_t setRelease;
	cref_t setLegato;
	cref_t setRetrigger;
	cref_t getValue;
	cref_t setCurvature;
	cref_t setVelocitySensitivity;
	cref_t setRateScaling;
};

struct playdate_sound_synth_32 {
	cref_t newSynth;
	cref_t freeSynth;
	cref_t setWaveform;
	cref_t setGenerator_deprecated;
	cref_t setSample;
	cref_t setAttackTime;
	cref_t setDecayTime;
	cref_t setSustainLevel;
	cref_t setReleaseTime;
	cref_t setTranspose;
	cref_t setFrequencyModulator;
	cref_t getFrequencyModulator;
	cref_t setAmplitudeModulator;
	cref_t getAmplitudeModulator;
	cref_t getParameterCount;
	cref_t setParameter;
	cref_t setParameterModulator;
	cref_t getParameterModulator;
	cref_t playNote;
	cref_t playMIDINote;
	cref_t noteOff;
	cref_t stop;
	cref_t setVolume;
	cref_t getVolume;
	cref_t isPlaying;
	cref_t getEnvelope;
	cref_t setWavetable;
	cref_t setGenerator;
	cref_t copy;
	cref_t clearEnvelope;
};

struct playdate_control_signal_32 {
	cref_t newSignal;
	cref_t freeSignal;
	cref_t clearEvents;
	cref_t addEvent;
	cref_t removeEvent;
	cref_t getMIDIControllerNumber;
};

struct playdate_sound_instrument_32 {
	cref_t newInstrument;
	cref_t freeInstrument;
	cref_t addVoice;
	cref_t playNote;
	cref_t playMIDINote;
	cref_t setPitchBend;
	cref_t setPitchBendRange;
	cref_t setTranspose;
	cref_t noteOff;
	cref_t allNotesOff;
	cref_t setVolume;
	cref_t getVolume;
	cref_t activeVoiceCount;
};

struct playdate_sound_track_32 {
	cref_t newTrack;
	cref_t freeTrack;
	cref_t setInstrument;
	cref_t getInstrument;
	cref_t addNoteEvent;
	cref_t removeNoteEvent;
	cref_t clearNotes;
	cref_t getControlSignalCount;
	cref_t getControlSignal;
	cref_t clearControlEvents;
	cref_t getPolyphony;
	cref_t activeVoiceCount;
	cref_t setMuted;
	cref_t getLength;
	cref_t getIndexForStep;
	cref_t getNoteAtIndex;
	cref_t getSignalForController;
};

struct playdate_sound_sequence_32 {
	cref_t newSequence;
	cref_t freeSequence;
	cref_t loadMIDIFile;
	cref_t getTime;
	cref_t setTime;
	cref_t setLoops;
	cref_t getTempo_deprecated;
	cref_t setTempo;
	cref_t getTrackCount;
	cref_t addTrack;
	cref_t getTrackAtIndex;
	cref_t setTrackAtIndex;
	cref_t allNotesOff;
	cref_t isPlaying;
	cref_t getLength;
	cref_t play;
	cref_t stop;
	cref_t getCurrentStep;
	cref_t setCurrentStep;
	cref_t getTempo;
};

struct playdate_sound_effect_twopolefilter_32 {
	cref_t newFilter;
	cref_t freeFilter;
	cref_t setType;
	cref_t setFrequency;
	cref_t setFrequencyModulator;
	cref_t getFrequencyModulator;
	cref_t setGain;
	cref_t setResonance;
	cref_t setResonanceModulator;
	cref_t getResonanceModulator;
};

struct playdate_sound_effect_onepolefilter_32 {
	cref_t newFilter;
	cref_t freeFilter;
	cref_t setParameter;
	cref_t setParameterModulator;
	cref_t getParameterModulator;
};

struct playdate_sound_effect_bitcrusher_32 {
	cref_t newBitCrusher;
	cref_t freeBitCrusher;
	cref_t setAmount;
	cref_t setAmountModulator;
	cref_t getAmountModulator;
	cref_t setUndersampling;
	cref_t setUndersampleModulator;
	cref_t getUndersampleModulator;
};

struct playdate_sound_effect_ringmodulator_32 {
	cref_t newRingmod;
	cref_t freeRingmod;
	cref_t setFrequency;
	cref_t setFrequencyModulator;
	cref_t getFrequencyModulator;
};

struct playdate_sound_effect_delayline_32 {
	cref_t newDelayLine;
	cref_t freeDelayLine;
	cref_t setLength;
	cref_t setFeedback;
	cref_t addTap;
	cref_t freeTap;
	cref_t setTapDelay;
	cref_t setTapDelayModulator;
	cref_t getTapDelayModulator;
	cref_t setTapChannelsFlipped;
};

struct playdate_sound_effect_overdrive_32 {
	cref_t newOverdrive;
	cref_t freeOverdrive;
	cref_t setGain;
	cref_t setLimit;
	cref_t setLimitModulator;
	cref_t getLimitModulator;
	cref_t setOffset;
	cref_t setOffsetModulator;
	cref_t getOffsetModulator;
};

struct playdate_sound_effect_32 {
	cref_t newEffect;
	cref_t freeEffect;
	cref_t setMix;
	cref_t setMixModulator;
	cref_t getMixModulator;
	cref_t setUserdata;
	cref_t getUserdata;
	cref_t twopolefilter;
	cref_t onepolefilter;
	cref_t bitcrusher;
	cref_t ringmodulator;
	cref_t delayline;
	cref_t overdrive;
};

struct playdate_sound_channel_32 {
	cref_t newChannel;
	cref_t freeChannel;
	cref_t addSource;
	cref_t removeSource;
	cref_t addCallbackSource;
	cref_t addEffect;
	cref_t removeEffect;
	cref_t setVolume;
	cref_t getVolume;
	cref_t setVolumeModulator;
	cref_t getVolumeModulator;
	cref_t setPan;
	cref_t setPanModulator;
	cref_t getPanModulator;
	cref_t getDryLevelSignal;
	cref_t getWetLevelSignal;
};

struct playdate_sound_32 {
	cref_t channel;
	cref_t fileplayer;
	cref_t sample;
	cref_t sampleplayer;
	cref_t synth;
	cref_t sequence;
	cref_t effect;
	cref_t lfo;
	cref_t envelope;
	cref_t source;
	cref_t controlsignal;
	cref_t track;
	cref_t instrument;
	cref_t getCurrentTime;
	cref_t addSource;
	cref_t getDefaultChannel;
	cref_t addChannel;
	cref_t removeChannel;
	cref_t setMicCallback;
	cref_t getHeadphoneState;
	cref_t setOutputsActive;
	cref_t removeSource;
	cref_t signal;
	cref_t getError;
};

struct playdate_display_32 {
	cref_t getWidth;
	cref_t getHeight;
	cref_t setRefreshRate;
	cref_t setInverted;
	cref_t setScale;
	cref_t setMosaic;
	cref_t setFlipped;
	cref_t setOffset;
};

struct PDScore_32 {
	uint32_t rank;
	uint32_t value;
	cref_t player;
};

struct PDScoresList_32 {
	cref_t boardID;
	uint32_t count;
	uint32_t lastUpdated;
	int32_t playerIncluded;
	uint32_t limit;
	cref_t scores;
};

struct PDBoard_32 {
	cref_t boardID;
	cref_t name;
};

struct PDBoardsList_32 {
	uint32_t count;
	uint32_t lastUpdated;
	cref_t boards;
};

struct playdate_scoreboards_32 {
	cref_t addScore;
	cref_t getPersonalBest;
	cref_t freeScore;
	cref_t getScoreboards;
	cref_t freeBoardsList;
	cref_t getScores;
	cref_t freeScoresList;
};

struct PlaydateAPI_32 {
	cref_t system;
	cref_t file;
	cref_t graphics;
	cref_t sprite;
	cref_t display;
	cref_t sound;
	cref_t lua;
	cref_t json;
	cref_t scoreboards;
};


void * playdate_sys_realloc(Cranked *cranked, void * ptr, uint32_t size);
int32_t playdate_sys_formatString(Cranked *cranked, cref_t * ret, uint8_t * fmt, ... );
void playdate_sys_logToConsole(Cranked *cranked, uint8_t * fmt, ... );
void playdate_sys_error(Cranked *cranked, uint8_t * fmt, ... );
int32_t playdate_sys_getLanguage(Cranked *cranked);
uint32_t playdate_sys_getCurrentTimeMilliseconds(Cranked *cranked);
uint32_t playdate_sys_getSecondsSinceEpoch(Cranked *cranked, uint32_t * milliseconds);
void playdate_sys_drawFPS(Cranked *cranked, int32_t x, int32_t y);
void playdate_sys_setUpdateCallback(Cranked *cranked, cref_t update, void * userdata);
void playdate_sys_getButtonState(Cranked *cranked, int32_t * current, int32_t * pushed, int32_t * released);
void playdate_sys_setPeripheralsEnabled(Cranked *cranked, int32_t mask);
void playdate_sys_getAccelerometer(Cranked *cranked, float * outx, float * outy, float * outz);
float playdate_sys_getCrankChange(Cranked *cranked);
float playdate_sys_getCrankAngle(Cranked *cranked);
int32_t playdate_sys_isCrankDocked(Cranked *cranked);
int32_t playdate_sys_setCrankSoundsDisabled(Cranked *cranked, int32_t flag);
int32_t playdate_sys_getFlipped(Cranked *cranked);
void playdate_sys_setAutoLockDisabled(Cranked *cranked, int32_t disable);
void playdate_sys_setMenuImage(Cranked *cranked, LCDBitmap_32 * bitmap, int32_t xOffset);
PDMenuItem_32 * playdate_sys_addMenuItem(Cranked *cranked, uint8_t * title, cref_t callback, void * userdata);
PDMenuItem_32 * playdate_sys_addCheckmarkMenuItem(Cranked *cranked, uint8_t * title, int32_t value, cref_t callback, void * userdata);
PDMenuItem_32 * playdate_sys_addOptionsMenuItem(Cranked *cranked, uint8_t * title, cref_t * optionTitles, int32_t optionsCount, cref_t f, void * userdata);
void playdate_sys_removeAllMenuItems(Cranked *cranked);
void playdate_sys_removeMenuItem(Cranked *cranked, PDMenuItem_32 * menuItem);
int32_t playdate_sys_getMenuItemValue(Cranked *cranked, PDMenuItem_32 * menuItem);
void playdate_sys_setMenuItemValue(Cranked *cranked, PDMenuItem_32 * menuItem, int32_t value);
uint8_t * playdate_sys_getMenuItemTitle(Cranked *cranked, PDMenuItem_32 * menuItem);
void playdate_sys_setMenuItemTitle(Cranked *cranked, PDMenuItem_32 * menuItem, uint8_t * title);
void * playdate_sys_getMenuItemUserdata(Cranked *cranked, PDMenuItem_32 * menuItem);
void playdate_sys_setMenuItemUserdata(Cranked *cranked, PDMenuItem_32 * menuItem, void * ud);
int32_t playdate_sys_getReduceFlashing(Cranked *cranked);
float playdate_sys_getElapsedTime(Cranked *cranked);
void playdate_sys_resetElapsedTime(Cranked *cranked);
float playdate_sys_getBatteryPercentage(Cranked *cranked);
float playdate_sys_getBatteryVoltage(Cranked *cranked);
int32_t playdate_sys_getTimezoneOffset(Cranked *cranked);
int32_t playdate_sys_shouldDisplay24HourTime(Cranked *cranked);
void playdate_sys_convertEpochToDateTime(Cranked *cranked, uint32_t epoch, PDDateTime_32 * datetime);
uint32_t playdate_sys_convertDateTimeToEpoch(Cranked *cranked, PDDateTime_32 * datetime);
void playdate_sys_clearICache(Cranked *cranked);
void playdate_sys_setButtonCallback(Cranked *cranked, cref_t cb, void * buttonud, int32_t queuesize);
void playdate_sys_setSerialMessageCallback(Cranked *cranked, cref_t callback);
int32_t playdate_sys_vaFormatString(Cranked *cranked, cref_t * outstr, uint8_t * fmt, ... );
int32_t playdate_sys_parseString(Cranked *cranked, uint8_t * str, uint8_t * format, ... );
uint8_t * playdate_file_geterr(Cranked *cranked);
int32_t playdate_file_listfiles(Cranked *cranked, uint8_t * path, cref_t callback, void * userdata, int32_t showhidden);
int32_t playdate_file_stat(Cranked *cranked, uint8_t * path, FileStat_32 * stat);
int32_t playdate_file_mkdir(Cranked *cranked, uint8_t * path);
int32_t playdate_file_unlink(Cranked *cranked, uint8_t * name, int32_t recursive);
int32_t playdate_file_rename(Cranked *cranked, uint8_t * from, uint8_t * to);
SDFile_32 * playdate_file_open(Cranked *cranked, uint8_t * name, int32_t mode);
int32_t playdate_file_close(Cranked *cranked, SDFile_32 * file);
int32_t playdate_file_read(Cranked *cranked, SDFile_32 * file, void * buf, uint32_t len);
int32_t playdate_file_write(Cranked *cranked, SDFile_32 * file, void * buf, uint32_t len);
int32_t playdate_file_flush(Cranked *cranked, SDFile_32 * file);
int32_t playdate_file_tell(Cranked *cranked, SDFile_32 * file);
int32_t playdate_file_seek(Cranked *cranked, SDFile_32 * file, int32_t pos, int32_t whence);
LCDVideoPlayer_32 * playdate_video_loadVideo(Cranked *cranked, uint8_t * path);
void playdate_video_freePlayer(Cranked *cranked, LCDVideoPlayer_32 * p);
int32_t playdate_video_setContext(Cranked *cranked, LCDVideoPlayer_32 * p, LCDBitmap_32 * context);
void playdate_video_useScreenContext(Cranked *cranked, LCDVideoPlayer_32 * p);
int32_t playdate_video_renderFrame(Cranked *cranked, LCDVideoPlayer_32 * p, int32_t n);
uint8_t * playdate_video_getError(Cranked *cranked, LCDVideoPlayer_32 * p);
void playdate_video_getInfo(Cranked *cranked, LCDVideoPlayer_32 * p, int32_t * outWidth, int32_t * outHeight, float * outFrameRate, int32_t * outFrameCount, int32_t * outCurrentFrame);
LCDBitmap_32 * playdate_video_getContext(Cranked *cranked, LCDVideoPlayer_32 * p);
void playdate_graphics_clear(Cranked *cranked, uint32_t color);
void playdate_graphics_setBackgroundColor(Cranked *cranked, int32_t color);
void playdate_graphics_setStencil(Cranked *cranked, LCDBitmap_32 * stencil);
int32_t playdate_graphics_setDrawMode(Cranked *cranked, int32_t mode);
void playdate_graphics_setDrawOffset(Cranked *cranked, int32_t dx, int32_t dy);
void playdate_graphics_setClipRect(Cranked *cranked, int32_t x, int32_t y, int32_t width, int32_t height);
void playdate_graphics_clearClipRect(Cranked *cranked);
void playdate_graphics_setLineCapStyle(Cranked *cranked, int32_t endCapStyle);
void playdate_graphics_setFont(Cranked *cranked, LCDFont_32 * font);
void playdate_graphics_setTextTracking(Cranked *cranked, int32_t tracking);
void playdate_graphics_pushContext(Cranked *cranked, LCDBitmap_32 * target);
void playdate_graphics_popContext(Cranked *cranked);
void playdate_graphics_drawBitmap(Cranked *cranked, LCDBitmap_32 * bitmap, int32_t x, int32_t y, int32_t flip);
void playdate_graphics_tileBitmap(Cranked *cranked, LCDBitmap_32 * bitmap, int32_t x, int32_t y, int32_t width, int32_t height, int32_t flip);
void playdate_graphics_drawLine(Cranked *cranked, int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t width, uint32_t color);
void playdate_graphics_fillTriangle(Cranked *cranked, int32_t x1, int32_t y1, int32_t x2, int32_t y2, int32_t x3, int32_t y3, uint32_t color);
void playdate_graphics_drawRect(Cranked *cranked, int32_t x, int32_t y, int32_t width, int32_t height, uint32_t color);
void playdate_graphics_fillRect(Cranked *cranked, int32_t x, int32_t y, int32_t width, int32_t height, uint32_t color);
void playdate_graphics_drawEllipse(Cranked *cranked, int32_t x, int32_t y, int32_t width, int32_t height, int32_t lineWidth, float startAngle, float endAngle, uint32_t color);
void playdate_graphics_fillEllipse(Cranked *cranked, int32_t x, int32_t y, int32_t width, int32_t height, float startAngle, float endAngle, uint32_t color);
void playdate_graphics_drawScaledBitmap(Cranked *cranked, LCDBitmap_32 * bitmap, int32_t x, int32_t y, float xscale, float yscale);
int32_t playdate_graphics_drawText(Cranked *cranked, void * text, uint32_t len, int32_t encoding, int32_t x, int32_t y);
LCDBitmap_32 * playdate_graphics_newBitmap(Cranked *cranked, int32_t width, int32_t height, uint32_t bgcolor);
void playdate_graphics_freeBitmap(Cranked *cranked, LCDBitmap_32 * );
LCDBitmap_32 * playdate_graphics_loadBitmap(Cranked *cranked, uint8_t * path, cref_t * outerr);
LCDBitmap_32 * playdate_graphics_copyBitmap(Cranked *cranked, LCDBitmap_32 * bitmap);
void playdate_graphics_loadIntoBitmap(Cranked *cranked, uint8_t * path, LCDBitmap_32 * bitmap, cref_t * outerr);
void playdate_graphics_getBitmapData(Cranked *cranked, LCDBitmap_32 * bitmap, int32_t * width, int32_t * height, int32_t * rowbytes, cref_t * mask, cref_t * data);
void playdate_graphics_clearBitmap(Cranked *cranked, LCDBitmap_32 * bitmap, uint32_t bgcolor);
LCDBitmap_32 * playdate_graphics_rotatedBitmap(Cranked *cranked, LCDBitmap_32 * bitmap, float rotation, float xscale, float yscale, int32_t * allocedSize);
LCDBitmapTable_32 * playdate_graphics_newBitmapTable(Cranked *cranked, int32_t count, int32_t width, int32_t height);
void playdate_graphics_freeBitmapTable(Cranked *cranked, LCDBitmapTable_32 * table);
LCDBitmapTable_32 * playdate_graphics_loadBitmapTable(Cranked *cranked, uint8_t * path, cref_t * outerr);
void playdate_graphics_loadIntoBitmapTable(Cranked *cranked, uint8_t * path, LCDBitmapTable_32 * table, cref_t * outerr);
LCDBitmap_32 * playdate_graphics_getTableBitmap(Cranked *cranked, LCDBitmapTable_32 * table, int32_t idx);
LCDFont_32 * playdate_graphics_loadFont(Cranked *cranked, uint8_t * path, cref_t * outErr);
LCDFontPage_32 * playdate_graphics_getFontPage(Cranked *cranked, LCDFont_32 * font, uint32_t c);
LCDFontGlyph_32 * playdate_graphics_getPageGlyph(Cranked *cranked, LCDFontPage_32 * page, uint32_t c, cref_t * bitmap, int32_t * advance);
int32_t playdate_graphics_getGlyphKerning(Cranked *cranked, LCDFontGlyph_32 * glyph, uint32_t glyphcode, uint32_t nextcode);
int32_t playdate_graphics_getTextWidth(Cranked *cranked, LCDFont_32 * font, void * text, uint32_t len, int32_t encoding, int32_t tracking);
uint8_t * playdate_graphics_getFrame(Cranked *cranked);
uint8_t * playdate_graphics_getDisplayFrame(Cranked *cranked);
LCDBitmap_32 * playdate_graphics_copyFrameBufferBitmap(Cranked *cranked);
void playdate_graphics_markUpdatedRows(Cranked *cranked, int32_t start, int32_t end);
void playdate_graphics_display(Cranked *cranked);
void playdate_graphics_setColorToPattern(Cranked *cranked, uint32_t * color, LCDBitmap_32 * bitmap, int32_t x, int32_t y);
int32_t playdate_graphics_checkMaskCollision(Cranked *cranked, LCDBitmap_32 * bitmap1, int32_t x1, int32_t y1, int32_t flip1, LCDBitmap_32 * bitmap2, int32_t x2, int32_t y2, int32_t flip2, LCDRect_32 rect);
void playdate_graphics_setScreenClipRect(Cranked *cranked, int32_t x, int32_t y, int32_t width, int32_t height);
void playdate_graphics_fillPolygon(Cranked *cranked, int32_t nPoints, int32_t * coords, uint32_t color, int32_t fillrule);
uint8_t playdate_graphics_getFontHeight(Cranked *cranked, LCDFont_32 * font);
LCDBitmap_32 * playdate_graphics_getDisplayBufferBitmap(Cranked *cranked);
void playdate_graphics_drawRotatedBitmap(Cranked *cranked, LCDBitmap_32 * bitmap, int32_t x, int32_t y, float rotation, float centerx, float centery, float xscale, float yscale);
void playdate_graphics_setTextLeading(Cranked *cranked, int32_t lineHeightAdustment);
int32_t playdate_graphics_setBitmapMask(Cranked *cranked, LCDBitmap_32 * bitmap, LCDBitmap_32 * mask);
LCDBitmap_32 * playdate_graphics_getBitmapMask(Cranked *cranked, LCDBitmap_32 * bitmap);
void playdate_graphics_setStencilImage(Cranked *cranked, LCDBitmap_32 * stencil, int32_t tile);
LCDFont_32 * playdate_graphics_makeFontFromData(Cranked *cranked, LCDFontData_32 * data, int32_t wide);
int32_t playdate_graphics_getTextTracking(Cranked *cranked);
void playdate_graphics_setPixel(Cranked *cranked, int32_t x, int32_t y, uint32_t c);
int32_t playdate_graphics_getBitmapPixel(Cranked *cranked, LCDBitmap_32 * bitmap, int32_t x, int32_t y);
void playdate_graphics_getBitmapTableInfo(Cranked *cranked, LCDBitmapTable_32 * table, int32_t * count, int32_t * width);
void playdate_graphics_drawTextInRect(Cranked *cranked, void * text, uint32_t len, int32_t encoding, int32_t x, int32_t y, int32_t width, int32_t height, int32_t wrap, int32_t align);
void playdate_sprite_setAlwaysRedraw(Cranked *cranked, int32_t flag);
void playdate_sprite_addDirtyRect(Cranked *cranked, LCDRect_32 dirtyRect);
void playdate_sprite_drawSprites(Cranked *cranked);
void playdate_sprite_updateAndDrawSprites(Cranked *cranked);
LCDSprite_32 * playdate_sprite_newSprite(Cranked *cranked);
void playdate_sprite_freeSprite(Cranked *cranked, LCDSprite_32 * sprite);
LCDSprite_32 * playdate_sprite_copy(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_addSprite(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_removeSprite(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_removeSprites(Cranked *cranked, cref_t * sprites, int32_t count);
void playdate_sprite_removeAllSprites(Cranked *cranked);
int32_t playdate_sprite_getSpriteCount(Cranked *cranked);
void playdate_sprite_setBounds(Cranked *cranked, LCDSprite_32 * sprite, PDRect_32 bounds);
PDRect_32 playdate_sprite_getBounds(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_moveTo(Cranked *cranked, LCDSprite_32 * sprite, float x, float y);
void playdate_sprite_moveBy(Cranked *cranked, LCDSprite_32 * sprite, float dx, float dy);
void playdate_sprite_setImage(Cranked *cranked, LCDSprite_32 * sprite, LCDBitmap_32 * image, int32_t flip);
LCDBitmap_32 * playdate_sprite_getImage(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setSize(Cranked *cranked, LCDSprite_32 * s, float width, float height);
void playdate_sprite_setZIndex(Cranked *cranked, LCDSprite_32 * sprite, int16_t zIndex);
int16_t playdate_sprite_getZIndex(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setDrawMode(Cranked *cranked, LCDSprite_32 * sprite, int32_t mode);
void playdate_sprite_setImageFlip(Cranked *cranked, LCDSprite_32 * sprite, int32_t flip);
int32_t playdate_sprite_getImageFlip(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setStencil(Cranked *cranked, LCDSprite_32 * sprite, LCDBitmap_32 * stencil);
void playdate_sprite_setClipRect(Cranked *cranked, LCDSprite_32 * sprite, LCDRect_32 clipRect);
void playdate_sprite_clearClipRect(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setClipRectsInRange(Cranked *cranked, LCDRect_32 clipRect, int32_t startZ, int32_t endZ);
void playdate_sprite_clearClipRectsInRange(Cranked *cranked, int32_t startZ, int32_t endZ);
void playdate_sprite_setUpdatesEnabled(Cranked *cranked, LCDSprite_32 * sprite, int32_t flag);
int32_t playdate_sprite_updatesEnabled(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setCollisionsEnabled(Cranked *cranked, LCDSprite_32 * sprite, int32_t flag);
int32_t playdate_sprite_collisionsEnabled(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setVisible(Cranked *cranked, LCDSprite_32 * sprite, int32_t flag);
int32_t playdate_sprite_isVisible(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setOpaque(Cranked *cranked, LCDSprite_32 * sprite, int32_t flag);
void playdate_sprite_markDirty(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setTag(Cranked *cranked, LCDSprite_32 * sprite, uint8_t tag);
uint8_t playdate_sprite_getTag(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setIgnoresDrawOffset(Cranked *cranked, LCDSprite_32 * sprite, int32_t flag);
void playdate_sprite_setUpdateFunction(Cranked *cranked, LCDSprite_32 * sprite, cref_t func);
void playdate_sprite_setDrawFunction(Cranked *cranked, LCDSprite_32 * sprite, cref_t func);
void playdate_sprite_getPosition(Cranked *cranked, LCDSprite_32 * sprite, float * x, float * y);
void playdate_sprite_resetCollisionWorld(Cranked *cranked);
void playdate_sprite_setCollideRect(Cranked *cranked, LCDSprite_32 * sprite, PDRect_32 collideRect);
PDRect_32 playdate_sprite_getCollideRect(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_clearCollideRect(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setCollisionResponseFunction(Cranked *cranked, LCDSprite_32 * sprite, cref_t func);
SpriteCollisionInfo_32 * playdate_sprite_checkCollisions(Cranked *cranked, LCDSprite_32 * sprite, float goalX, float goalY, float * actualX, float * actualY, int32_t * len);
SpriteCollisionInfo_32 * playdate_sprite_moveWithCollisions(Cranked *cranked, LCDSprite_32 * sprite, float goalX, float goalY, float * actualX, float * actualY, int32_t * len);
cref_t * playdate_sprite_querySpritesAtPoint(Cranked *cranked, float x, float y, int32_t * len);
cref_t * playdate_sprite_querySpritesInRect(Cranked *cranked, float x, float y, float width, float height, int32_t * len);
cref_t * playdate_sprite_querySpritesAlongLine(Cranked *cranked, float x1, float y1, float x2, float y2, int32_t * len);
SpriteQueryInfo_32 * playdate_sprite_querySpriteInfoAlongLine(Cranked *cranked, float x1, float y1, float x2, float y2, int32_t * len);
cref_t * playdate_sprite_overlappingSprites(Cranked *cranked, LCDSprite_32 * sprite, int32_t * len);
cref_t * playdate_sprite_allOverlappingSprites(Cranked *cranked, int32_t * len);
void playdate_sprite_setStencilPattern(Cranked *cranked, LCDSprite_32 * sprite, uint8_t * pattern);
void playdate_sprite_clearStencil(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setUserdata(Cranked *cranked, LCDSprite_32 * sprite, void * userdata);
void * playdate_sprite_getUserdata(Cranked *cranked, LCDSprite_32 * sprite);
void playdate_sprite_setStencilImage(Cranked *cranked, LCDSprite_32 * sprite, LCDBitmap_32 * stencil, int32_t tile);
void playdate_sprite_setCenter(Cranked *cranked, LCDSprite_32 * s, float x, float y);
void playdate_sprite_getCenter(Cranked *cranked, LCDSprite_32 * s, float * x, float * y);
int32_t playdate_display_getWidth(Cranked *cranked);
int32_t playdate_display_getHeight(Cranked *cranked);
void playdate_display_setRefreshRate(Cranked *cranked, float rate);
void playdate_display_setInverted(Cranked *cranked, int32_t flag);
void playdate_display_setScale(Cranked *cranked, uint32_t s);
void playdate_display_setMosaic(Cranked *cranked, uint32_t x, uint32_t y);
void playdate_display_setFlipped(Cranked *cranked, int32_t x, int32_t y);
void playdate_display_setOffset(Cranked *cranked, int32_t x, int32_t y);
SoundChannel_32 * playdate_sound_channel_newChannel(Cranked *cranked);
void playdate_sound_channel_freeChannel(Cranked *cranked, SoundChannel_32 * channel);
int32_t playdate_sound_channel_addSource(Cranked *cranked, SoundChannel_32 * channel, SoundSource_32 * source);
int32_t playdate_sound_channel_removeSource(Cranked *cranked, SoundChannel_32 * channel, SoundSource_32 * source);
SoundSource_32 * playdate_sound_channel_addCallbackSource(Cranked *cranked, SoundChannel_32 * channel, cref_t callback, void * context, int32_t stereo);
void playdate_sound_channel_addEffect(Cranked *cranked, SoundChannel_32 * channel, SoundEffect_32 * effect);
void playdate_sound_channel_removeEffect(Cranked *cranked, SoundChannel_32 * channel, SoundEffect_32 * effect);
void playdate_sound_channel_setVolume(Cranked *cranked, SoundChannel_32 * channel, float volume);
float playdate_sound_channel_getVolume(Cranked *cranked, SoundChannel_32 * channel);
void playdate_sound_channel_setVolumeModulator(Cranked *cranked, SoundChannel_32 * channel, PDSynthSignalValue_32 * mod);
PDSynthSignalValue_32 * playdate_sound_channel_getVolumeModulator(Cranked *cranked, SoundChannel_32 * channel);
void playdate_sound_channel_setPan(Cranked *cranked, SoundChannel_32 * channel, float pan);
void playdate_sound_channel_setPanModulator(Cranked *cranked, SoundChannel_32 * channel, PDSynthSignalValue_32 * mod);
PDSynthSignalValue_32 * playdate_sound_channel_getPanModulator(Cranked *cranked, SoundChannel_32 * channel);
PDSynthSignalValue_32 * playdate_sound_channel_getDryLevelSignal(Cranked *cranked, SoundChannel_32 * channel);
PDSynthSignalValue_32 * playdate_sound_channel_getWetLevelSignal(Cranked *cranked, SoundChannel_32 * channel);
FilePlayer_32 * playdate_sound_fileplayer_newPlayer(Cranked *cranked);
void playdate_sound_fileplayer_freePlayer(Cranked *cranked, FilePlayer_32 * player);
int32_t playdate_sound_fileplayer_loadIntoPlayer(Cranked *cranked, FilePlayer_32 * player, uint8_t * path);
void playdate_sound_fileplayer_setBufferLength(Cranked *cranked, FilePlayer_32 * player, float bufferLen);
int32_t playdate_sound_fileplayer_play(Cranked *cranked, FilePlayer_32 * player, int32_t repeat);
int32_t playdate_sound_fileplayer_isPlaying(Cranked *cranked, FilePlayer_32 * player);
void playdate_sound_fileplayer_pause(Cranked *cranked, FilePlayer_32 * player);
void playdate_sound_fileplayer_stop(Cranked *cranked, FilePlayer_32 * player);
void playdate_sound_fileplayer_setVolume(Cranked *cranked, FilePlayer_32 * player, float left, float right);
void playdate_sound_fileplayer_getVolume(Cranked *cranked, FilePlayer_32 * player, float * left, float * right);
float playdate_sound_fileplayer_getLength(Cranked *cranked, FilePlayer_32 * player);
void playdate_sound_fileplayer_setOffset(Cranked *cranked, FilePlayer_32 * player, float offset);
void playdate_sound_fileplayer_setRate(Cranked *cranked, FilePlayer_32 * player, float rate);
void playdate_sound_fileplayer_setLoopRange(Cranked *cranked, FilePlayer_32 * player, float start, float end);
int32_t playdate_sound_fileplayer_didUnderrun(Cranked *cranked, FilePlayer_32 * player);
void playdate_sound_fileplayer_setFinishCallback(Cranked *cranked, FilePlayer_32 * player, cref_t callback, void * userdata);
void playdate_sound_fileplayer_setLoopCallback(Cranked *cranked, FilePlayer_32 * player, cref_t callback, void * userdata);
float playdate_sound_fileplayer_getOffset(Cranked *cranked, FilePlayer_32 * player);
float playdate_sound_fileplayer_getRate(Cranked *cranked, FilePlayer_32 * player);
void playdate_sound_fileplayer_setStopOnUnderrun(Cranked *cranked, FilePlayer_32 * player, int32_t flag);
void playdate_sound_fileplayer_fadeVolume(Cranked *cranked, FilePlayer_32 * player, float left, float right, int32_t len, cref_t finishCallback, void * userdata);
void playdate_sound_fileplayer_setMP3StreamSource(Cranked *cranked, FilePlayer_32 * player, cref_t dataSource, void * userdata, float bufferLen);
AudioSample_32 * playdate_sound_sample_newSampleBuffer(Cranked *cranked, int32_t byteCount);
int32_t playdate_sound_sample_loadIntoSample(Cranked *cranked, AudioSample_32 * sample, uint8_t * path);
AudioSample_32 * playdate_sound_sample_load(Cranked *cranked, uint8_t * path);
AudioSample_32 * playdate_sound_sample_newSampleFromData(Cranked *cranked, uint8_t * data, int32_t format, uint32_t sampleRate, int32_t byteCount, int32_t shouldFreeData);
void playdate_sound_sample_getData(Cranked *cranked, AudioSample_32 * sample, cref_t * data, int32_t * format, uint32_t * sampleRate, uint32_t * bytelength);
void playdate_sound_sample_freeSample(Cranked *cranked, AudioSample_32 * sample);
float playdate_sound_sample_getLength(Cranked *cranked, AudioSample_32 * sample);
int32_t playdate_sound_sample_decompress(Cranked *cranked, AudioSample_32 * sample);
SamplePlayer_32 * playdate_sound_sampleplayer_newPlayer(Cranked *cranked);
void playdate_sound_sampleplayer_freePlayer(Cranked *cranked, SamplePlayer_32 * player);
void playdate_sound_sampleplayer_setSample(Cranked *cranked, SamplePlayer_32 * player, AudioSample_32 * sample);
int32_t playdate_sound_sampleplayer_play(Cranked *cranked, SamplePlayer_32 * player, int32_t repeat, float rate);
int32_t playdate_sound_sampleplayer_isPlaying(Cranked *cranked, SamplePlayer_32 * player);
void playdate_sound_sampleplayer_stop(Cranked *cranked, SamplePlayer_32 * player);
void playdate_sound_sampleplayer_setVolume(Cranked *cranked, SamplePlayer_32 * player, float left, float right);
void playdate_sound_sampleplayer_getVolume(Cranked *cranked, SamplePlayer_32 * player, float * left, float * right);
float playdate_sound_sampleplayer_getLength(Cranked *cranked, SamplePlayer_32 * player);
void playdate_sound_sampleplayer_setOffset(Cranked *cranked, SamplePlayer_32 * player, float offset);
void playdate_sound_sampleplayer_setRate(Cranked *cranked, SamplePlayer_32 * player, float rate);
void playdate_sound_sampleplayer_setPlayRange(Cranked *cranked, SamplePlayer_32 * player, int32_t start, int32_t end);
void playdate_sound_sampleplayer_setFinishCallback(Cranked *cranked, SamplePlayer_32 * player, cref_t callback, void * userdata);
void playdate_sound_sampleplayer_setLoopCallback(Cranked *cranked, SamplePlayer_32 * player, cref_t callback, void * userdata);
float playdate_sound_sampleplayer_getOffset(Cranked *cranked, SamplePlayer_32 * player);
float playdate_sound_sampleplayer_getRate(Cranked *cranked, SamplePlayer_32 * player);
void playdate_sound_sampleplayer_setPaused(Cranked *cranked, SamplePlayer_32 * player, int32_t flag);
PDSynth_32 * playdate_sound_synth_newSynth(Cranked *cranked);
void playdate_sound_synth_freeSynth(Cranked *cranked, PDSynth_32 * synth);
void playdate_sound_synth_setWaveform(Cranked *cranked, PDSynth_32 * synth, int32_t wave);
void playdate_sound_synth_setGenerator_deprecated(Cranked *cranked, PDSynth_32 * synth, int32_t stereo, cref_t render, cref_t noteOn, cref_t release, cref_t setparam, cref_t dealloc, void * userdata);
void playdate_sound_synth_setSample(Cranked *cranked, PDSynth_32 * synth, AudioSample_32 * sample, uint32_t sustainStart, uint32_t sustainEnd);
void playdate_sound_synth_setAttackTime(Cranked *cranked, PDSynth_32 * synth, float attack);
void playdate_sound_synth_setDecayTime(Cranked *cranked, PDSynth_32 * synth, float decay);
void playdate_sound_synth_setSustainLevel(Cranked *cranked, PDSynth_32 * synth, float sustain);
void playdate_sound_synth_setReleaseTime(Cranked *cranked, PDSynth_32 * synth, float release);
void playdate_sound_synth_setTranspose(Cranked *cranked, PDSynth_32 * synth, float halfSteps);
void playdate_sound_synth_setFrequencyModulator(Cranked *cranked, PDSynth_32 * synth, PDSynthSignalValue_32 * mod);
PDSynthSignalValue_32 * playdate_sound_synth_getFrequencyModulator(Cranked *cranked, PDSynth_32 * synth);
void playdate_sound_synth_setAmplitudeModulator(Cranked *cranked, PDSynth_32 * synth, PDSynthSignalValue_32 * mod);
PDSynthSignalValue_32 * playdate_sound_synth_getAmplitudeModulator(Cranked *cranked, PDSynth_32 * synth);
int32_t playdate_sound_synth_getParameterCount(Cranked *cranked, PDSynth_32 * synth);
int32_t playdate_sound_synth_setParameter(Cranked *cranked, PDSynth_32 * synth, int32_t parameter, float value);
void playdate_sound_synth_setParameterModulator(Cranked *cranked, PDSynth_32 * synth, int32_t parameter, PDSynthSignalValue_32 * mod);
PDSynthSignalValue_32 * playdate_sound_synth_getParameterModulator(Cranked *cranked, PDSynth_32 * synth, int32_t parameter);
void playdate_sound_synth_playNote(Cranked *cranked, PDSynth_32 * synth, float freq, float vel, float len, uint32_t when);
void playdate_sound_synth_playMIDINote(Cranked *cranked, PDSynth_32 * synth, float note, float vel, float len, uint32_t when);
void playdate_sound_synth_noteOff(Cranked *cranked, PDSynth_32 * synth, uint32_t when);
void playdate_sound_synth_stop(Cranked *cranked, PDSynth_32 * synth);
void playdate_sound_synth_setVolume(Cranked *cranked, PDSynth_32 * synth, float left, float right);
void playdate_sound_synth_getVolume(Cranked *cranked, PDSynth_32 * synth, float * left, float * right);
int32_t playdate_sound_synth_isPlaying(Cranked *cranked, PDSynth_32 * synth);
PDSynthEnvelope_32 * playdate_sound_synth_getEnvelope(Cranked *cranked, PDSynth_32 * synth);
int32_t playdate_sound_synth_setWavetable(Cranked *cranked, PDSynth_32 * synth, AudioSample_32 * sample, int32_t log2size, int32_t columns, int32_t rows);
void playdate_sound_synth_setGenerator(Cranked *cranked, PDSynth_32 * synth, int32_t stereo, cref_t render, cref_t noteOn, cref_t release, cref_t setparam, cref_t dealloc, cref_t copyUserdata, void * userdata);
PDSynth_32 * playdate_sound_synth_copy(Cranked *cranked, PDSynth_32 * synth);
void playdate_sound_synth_clearEnvelope(Cranked *cranked, PDSynth_32 * synth);
SoundSequence_32 * playdate_sound_sequence_newSequence(Cranked *cranked);
void playdate_sound_sequence_freeSequence(Cranked *cranked, SoundSequence_32 * sequence);
int32_t playdate_sound_sequence_loadMIDIFile(Cranked *cranked, SoundSequence_32 * seq, uint8_t * path);
uint32_t playdate_sound_sequence_getTime(Cranked *cranked, SoundSequence_32 * seq);
void playdate_sound_sequence_setTime(Cranked *cranked, SoundSequence_32 * seq, uint32_t time);
void playdate_sound_sequence_setLoops(Cranked *cranked, SoundSequence_32 * seq, int32_t loopstart, int32_t loopend, int32_t loops);
int32_t playdate_sound_sequence_getTempo_deprecated(Cranked *cranked, SoundSequence_32 * seq);
void playdate_sound_sequence_setTempo(Cranked *cranked, SoundSequence_32 * seq, float stepsPerSecond);
void playdate_sound_sequence_setTempo_int(Cranked *cranked, SoundSequence_32 * sequence, int32_t stepsPerSecond);
int32_t playdate_sound_sequence_getTrackCount(Cranked *cranked, SoundSequence_32 * seq);
SequenceTrack_32 * playdate_sound_sequence_addTrack(Cranked *cranked, SoundSequence_32 * seq);
SequenceTrack_32 * playdate_sound_sequence_getTrackAtIndex(Cranked *cranked, SoundSequence_32 * seq, uint32_t track);
void playdate_sound_sequence_setTrackAtIndex(Cranked *cranked, SoundSequence_32 * seq, SequenceTrack_32 * track, uint32_t idx);
void playdate_sound_sequence_allNotesOff(Cranked *cranked, SoundSequence_32 * seq);
int32_t playdate_sound_sequence_isPlaying(Cranked *cranked, SoundSequence_32 * seq);
uint32_t playdate_sound_sequence_getLength(Cranked *cranked, SoundSequence_32 * seq);
void playdate_sound_sequence_play(Cranked *cranked, SoundSequence_32 * seq, cref_t finishCallback, void * userdata);
void playdate_sound_sequence_stop(Cranked *cranked, SoundSequence_32 * seq);
int32_t playdate_sound_sequence_getCurrentStep(Cranked *cranked, SoundSequence_32 * seq, int32_t * timeOffset);
void playdate_sound_sequence_setCurrentStep(Cranked *cranked, SoundSequence_32 * seq, int32_t step, int32_t timeOffset, int32_t playNotes);
float playdate_sound_sequence_getTempo(Cranked *cranked, SoundSequence_32 * seq);
SoundEffect_32 * playdate_sound_effect_newEffect(Cranked *cranked, cref_t proc, void * userdata);
void playdate_sound_effect_freeEffect(Cranked *cranked, SoundEffect_32 * effect);
void playdate_sound_effect_setMix(Cranked *cranked, SoundEffect_32 * effect, float level);
void playdate_sound_effect_setMixModulator(Cranked *cranked, SoundEffect_32 * effect, PDSynthSignalValue_32 * signal);
PDSynthSignalValue_32 * playdate_sound_effect_getMixModulator(Cranked *cranked, SoundEffect_32 * effect);
void playdate_sound_effect_setUserdata(Cranked *cranked, SoundEffect_32 * effect, void * userdata);
void * playdate_sound_effect_getUserdata(Cranked *cranked, SoundEffect_32 * effect);
TwoPoleFilter_32 * playdate_sound_effect_twopolefilter_newFilter(Cranked *cranked);
void playdate_sound_effect_twopolefilter_freeFilter(Cranked *cranked, TwoPoleFilter_32 * filter);
void playdate_sound_effect_twopolefilter_setType(Cranked *cranked, TwoPoleFilter_32 * filter, int32_t type);
void playdate_sound_effect_twopolefilter_setFrequency(Cranked *cranked, TwoPoleFilter_32 * filter, float frequency);
void playdate_sound_effect_twopolefilter_setFrequencyModulator(Cranked *cranked, TwoPoleFilter_32 * filter, PDSynthSignalValue_32 * signal);
PDSynthSignalValue_32 * playdate_sound_effect_twopolefilter_getFrequencyModulator(Cranked *cranked, TwoPoleFilter_32 * filter);
void playdate_sound_effect_twopolefilter_setGain(Cranked *cranked, TwoPoleFilter_32 * filter, float gain);
void playdate_sound_effect_twopolefilter_setResonance(Cranked *cranked, TwoPoleFilter_32 * filter, float resonance);
void playdate_sound_effect_twopolefilter_setResonanceModulator(Cranked *cranked, TwoPoleFilter_32 * filter, PDSynthSignalValue_32 * signal);
PDSynthSignalValue_32 * playdate_sound_effect_twopolefilter_getResonanceModulator(Cranked *cranked, TwoPoleFilter_32 * filter);
OnePoleFilter_32 * playdate_sound_effect_onepolefilter_newFilter(Cranked *cranked);
void playdate_sound_effect_onepolefilter_freeFilter(Cranked *cranked, OnePoleFilter_32 * filter);
void playdate_sound_effect_onepolefilter_setParameter(Cranked *cranked, OnePoleFilter_32 * filter, float parameter);
void playdate_sound_effect_onepolefilter_setParameterModulator(Cranked *cranked, OnePoleFilter_32 * filter, PDSynthSignalValue_32 * signal);
PDSynthSignalValue_32 * playdate_sound_effect_onepolefilter_getParameterModulator(Cranked *cranked, OnePoleFilter_32 * filter);
BitCrusher_32 * playdate_sound_effect_bitcrusher_newBitCrusher(Cranked *cranked);
void playdate_sound_effect_bitcrusher_freeBitCrusher(Cranked *cranked, BitCrusher_32 * filter);
void playdate_sound_effect_bitcrusher_setAmount(Cranked *cranked, BitCrusher_32 * filter, float amount);
void playdate_sound_effect_bitcrusher_setAmountModulator(Cranked *cranked, BitCrusher_32 * filter, PDSynthSignalValue_32 * signal);
PDSynthSignalValue_32 * playdate_sound_effect_bitcrusher_getAmountModulator(Cranked *cranked, BitCrusher_32 * filter);
void playdate_sound_effect_bitcrusher_setUndersampling(Cranked *cranked, BitCrusher_32 * filter, float undersampling);
void playdate_sound_effect_bitcrusher_setUndersampleModulator(Cranked *cranked, BitCrusher_32 * filter, PDSynthSignalValue_32 * signal);
PDSynthSignalValue_32 * playdate_sound_effect_bitcrusher_getUndersampleModulator(Cranked *cranked, BitCrusher_32 * filter);
RingModulator_32 * playdate_sound_effect_ringmodulator_newRingmod(Cranked *cranked);
void playdate_sound_effect_ringmodulator_freeRingmod(Cranked *cranked, RingModulator_32 * filter);
void playdate_sound_effect_ringmodulator_setFrequency(Cranked *cranked, RingModulator_32 * filter, float frequency);
void playdate_sound_effect_ringmodulator_setFrequencyModulator(Cranked *cranked, RingModulator_32 * filter, PDSynthSignalValue_32 * signal);
PDSynthSignalValue_32 * playdate_sound_effect_ringmodulator_getFrequencyModulator(Cranked *cranked, RingModulator_32 * filter);
DelayLine_32 * playdate_sound_effect_delayline_newDelayLine(Cranked *cranked, int32_t length, int32_t stereo);
void playdate_sound_effect_delayline_freeDelayLine(Cranked *cranked, DelayLine_32 * filter);
void playdate_sound_effect_delayline_setLength(Cranked *cranked, DelayLine_32 * d, int32_t frames);
void playdate_sound_effect_delayline_setFeedback(Cranked *cranked, DelayLine_32 * d, float fb);
DelayLineTap_32 * playdate_sound_effect_delayline_addTap(Cranked *cranked, DelayLine_32 * d, int32_t delay);
void playdate_sound_effect_delayline_freeTap(Cranked *cranked, DelayLineTap_32 * tap);
void playdate_sound_effect_delayline_setTapDelay(Cranked *cranked, DelayLineTap_32 * t, int32_t frames);
void playdate_sound_effect_delayline_setTapDelayModulator(Cranked *cranked, DelayLineTap_32 * t, PDSynthSignalValue_32 * mod);
PDSynthSignalValue_32 * playdate_sound_effect_delayline_getTapDelayModulator(Cranked *cranked, DelayLineTap_32 * t);
void playdate_sound_effect_delayline_setTapChannelsFlipped(Cranked *cranked, DelayLineTap_32 * t, int32_t flip);
Overdrive_32 * playdate_sound_effect_overdrive_newOverdrive(Cranked *cranked);
void playdate_sound_effect_overdrive_freeOverdrive(Cranked *cranked, Overdrive_32 * filter);
void playdate_sound_effect_overdrive_setGain(Cranked *cranked, Overdrive_32 * o, float gain);
void playdate_sound_effect_overdrive_setLimit(Cranked *cranked, Overdrive_32 * o, float limit);
void playdate_sound_effect_overdrive_setLimitModulator(Cranked *cranked, Overdrive_32 * o, PDSynthSignalValue_32 * mod);
PDSynthSignalValue_32 * playdate_sound_effect_overdrive_getLimitModulator(Cranked *cranked, Overdrive_32 * o);
void playdate_sound_effect_overdrive_setOffset(Cranked *cranked, Overdrive_32 * o, float offset);
void playdate_sound_effect_overdrive_setOffsetModulator(Cranked *cranked, Overdrive_32 * o, PDSynthSignalValue_32 * mod);
PDSynthSignalValue_32 * playdate_sound_effect_overdrive_getOffsetModulator(Cranked *cranked, Overdrive_32 * o);
PDSynthLFO_32 * playdate_sound_lfo_newLFO(Cranked *cranked, int32_t type);
void playdate_sound_lfo_freeLFO(Cranked *cranked, PDSynthLFO_32 * lfo);
void playdate_sound_lfo_setType(Cranked *cranked, PDSynthLFO_32 * lfo, int32_t type);
void playdate_sound_lfo_setRate(Cranked *cranked, PDSynthLFO_32 * lfo, float rate);
void playdate_sound_lfo_setPhase(Cranked *cranked, PDSynthLFO_32 * lfo, float phase);
void playdate_sound_lfo_setCenter(Cranked *cranked, PDSynthLFO_32 * lfo, float center);
void playdate_sound_lfo_setDepth(Cranked *cranked, PDSynthLFO_32 * lfo, float depth);
void playdate_sound_lfo_setArpeggiation(Cranked *cranked, PDSynthLFO_32 * lfo, int32_t nSteps, float * steps);
void playdate_sound_lfo_setFunction(Cranked *cranked, PDSynthLFO_32 * lfo, cref_t lfoFunc, void * userdata, int32_t interpolate);
void playdate_sound_lfo_setDelay(Cranked *cranked, PDSynthLFO_32 * lfo, float holdoff, float ramptime);
void playdate_sound_lfo_setRetrigger(Cranked *cranked, PDSynthLFO_32 * lfo, int32_t flag);
float playdate_sound_lfo_getValue(Cranked *cranked, PDSynthLFO_32 * lfo);
void playdate_sound_lfo_setGlobal(Cranked *cranked, PDSynthLFO_32 * lfo, int32_t global);
void playdate_sound_lfo_setStartPhase(Cranked *cranked, PDSynthLFO_32 * lfo, float phase);
PDSynthEnvelope_32 * playdate_sound_envelope_newEnvelope(Cranked *cranked, float attack, float decay, float sustain, float release);
void playdate_sound_envelope_freeEnvelope(Cranked *cranked, PDSynthEnvelope_32 * env);
void playdate_sound_envelope_setAttack(Cranked *cranked, PDSynthEnvelope_32 * env, float attack);
void playdate_sound_envelope_setDecay(Cranked *cranked, PDSynthEnvelope_32 * env, float decay);
void playdate_sound_envelope_setSustain(Cranked *cranked, PDSynthEnvelope_32 * env, float sustain);
void playdate_sound_envelope_setRelease(Cranked *cranked, PDSynthEnvelope_32 * env, float release);
void playdate_sound_envelope_setLegato(Cranked *cranked, PDSynthEnvelope_32 * env, int32_t flag);
void playdate_sound_envelope_setRetrigger(Cranked *cranked, PDSynthEnvelope_32 * lfo, int32_t flag);
float playdate_sound_envelope_getValue(Cranked *cranked, PDSynthEnvelope_32 * env);
void playdate_sound_envelope_setCurvature(Cranked *cranked, PDSynthEnvelope_32 * env, float amount);
void playdate_sound_envelope_setVelocitySensitivity(Cranked *cranked, PDSynthEnvelope_32 * env, float velsens);
void playdate_sound_envelope_setRateScaling(Cranked *cranked, PDSynthEnvelope_32 * env, float scaling, float start, float end);
void playdate_sound_source_setVolume(Cranked *cranked, SoundSource_32 * c, float lvol, float rvol);
void playdate_sound_source_getVolume(Cranked *cranked, SoundSource_32 * c, float * outl, float * outr);
int32_t playdate_sound_source_isPlaying(Cranked *cranked, SoundSource_32 * c);
void playdate_sound_source_setFinishCallback(Cranked *cranked, SoundSource_32 * c, cref_t callback, void * userdata);
ControlSignal_32 * playdate_control_signal_newSignal(Cranked *cranked);
void playdate_control_signal_freeSignal(Cranked *cranked, ControlSignal_32 * signal);
void playdate_control_signal_clearEvents(Cranked *cranked, ControlSignal_32 * control);
void playdate_control_signal_addEvent(Cranked *cranked, ControlSignal_32 * control, int32_t step, float value, int32_t interpolate);
void playdate_control_signal_removeEvent(Cranked *cranked, ControlSignal_32 * control, int32_t step);
int32_t playdate_control_signal_getMIDIControllerNumber(Cranked *cranked, ControlSignal_32 * control);
SequenceTrack_32 * playdate_sound_track_newTrack(Cranked *cranked);
void playdate_sound_track_freeTrack(Cranked *cranked, SequenceTrack_32 * track);
void playdate_sound_track_setInstrument(Cranked *cranked, SequenceTrack_32 * track, PDSynthInstrument_32 * inst);
PDSynthInstrument_32 * playdate_sound_track_getInstrument(Cranked *cranked, SequenceTrack_32 * track);
void playdate_sound_track_addNoteEvent(Cranked *cranked, SequenceTrack_32 * track, uint32_t step, uint32_t len, float note, float velocity);
void playdate_sound_track_removeNoteEvent(Cranked *cranked, SequenceTrack_32 * track, uint32_t step, float note);
void playdate_sound_track_clearNotes(Cranked *cranked, SequenceTrack_32 * track);
int32_t playdate_sound_track_getControlSignalCount(Cranked *cranked, SequenceTrack_32 * track);
ControlSignal_32 * playdate_sound_track_getControlSignal(Cranked *cranked, SequenceTrack_32 * track, int32_t idx);
void playdate_sound_track_clearControlEvents(Cranked *cranked, SequenceTrack_32 * track);
int32_t playdate_sound_track_getPolyphony(Cranked *cranked, SequenceTrack_32 * track);
int32_t playdate_sound_track_activeVoiceCount(Cranked *cranked, SequenceTrack_32 * track);
void playdate_sound_track_setMuted(Cranked *cranked, SequenceTrack_32 * track, int32_t mute);
uint32_t playdate_sound_track_getLength(Cranked *cranked, SequenceTrack_32 * track);
int32_t playdate_sound_track_getIndexForStep(Cranked *cranked, SequenceTrack_32 * track, uint32_t step);
int32_t playdate_sound_track_getNoteAtIndex(Cranked *cranked, SequenceTrack_32 * track, int32_t index, uint32_t * outStep, uint32_t * outLen, float * outNote, float * outVelocity);
ControlSignal_32 * playdate_sound_track_getSignalForController(Cranked *cranked, SequenceTrack_32 * track, int32_t controller, int32_t create);
PDSynthInstrument_32 * playdate_sound_instrument_newInstrument(Cranked *cranked);
void playdate_sound_instrument_freeInstrument(Cranked *cranked, PDSynthInstrument_32 * inst);
int32_t playdate_sound_instrument_addVoice(Cranked *cranked, PDSynthInstrument_32 * inst, PDSynth_32 * synth, float rangeStart, float rangeEnd, float transpose);
PDSynth_32 * playdate_sound_instrument_playNote(Cranked *cranked, PDSynthInstrument_32 * inst, float frequency, float vel, float len, uint32_t when);
PDSynth_32 * playdate_sound_instrument_playMIDINote(Cranked *cranked, PDSynthInstrument_32 * inst, float note, float vel, float len, uint32_t when);
void playdate_sound_instrument_setPitchBend(Cranked *cranked, PDSynthInstrument_32 * inst, float bend);
void playdate_sound_instrument_setPitchBendRange(Cranked *cranked, PDSynthInstrument_32 * inst, float halfSteps);
void playdate_sound_instrument_setTranspose(Cranked *cranked, PDSynthInstrument_32 * inst, float halfSteps);
void playdate_sound_instrument_noteOff(Cranked *cranked, PDSynthInstrument_32 * inst, float note, uint32_t when);
void playdate_sound_instrument_allNotesOff(Cranked *cranked, PDSynthInstrument_32 * inst, uint32_t when);
void playdate_sound_instrument_setVolume(Cranked *cranked, PDSynthInstrument_32 * inst, float left, float right);
void playdate_sound_instrument_getVolume(Cranked *cranked, PDSynthInstrument_32 * inst, float * left, float * right);
int32_t playdate_sound_instrument_activeVoiceCount(Cranked *cranked, PDSynthInstrument_32 * inst);
uint32_t playdate_sound_getCurrentTime(Cranked *cranked);
SoundSource_32 * playdate_sound_addSource(Cranked *cranked, cref_t callback, void * context, int32_t stereo);
SoundChannel_32 * playdate_sound_getDefaultChannel(Cranked *cranked);
int32_t playdate_sound_addChannel(Cranked *cranked, SoundChannel_32 * channel);
int32_t playdate_sound_removeChannel(Cranked *cranked, SoundChannel_32 * channel);
int32_t playdate_sound_setMicCallback(Cranked *cranked, cref_t callback, void * context, int32_t source);
void playdate_sound_getHeadphoneState(Cranked *cranked, int32_t * headphone, int32_t * headsetmic, cref_t changeCallback);
void playdate_sound_setOutputsActive(Cranked *cranked, int32_t headphone, int32_t speaker);
int32_t playdate_sound_removeSource(Cranked *cranked, SoundSource_32 * source);
PDSynthSignal_32 * playdate_sound_signal_newSignal(Cranked *cranked, cref_t step, cref_t noteOn, cref_t noteOff, cref_t dealloc, void * userdata);
void playdate_sound_signal_freeSignal(Cranked *cranked, PDSynthSignal_32 * signal);
float playdate_sound_signal_getValue(Cranked *cranked, PDSynthSignal_32 * signal);
void playdate_sound_signal_setValueScale(Cranked *cranked, PDSynthSignal_32 * signal, float scale);
void playdate_sound_signal_setValueOffset(Cranked *cranked, PDSynthSignal_32 * signal, float offset);
PDSynthSignal_32 * playdate_sound_signal_newSignalForValue(Cranked *cranked, PDSynthSignalValue_32 * value);
uint8_t * playdate_sound_getError(Cranked *cranked);
int32_t playdate_lua_addFunction(Cranked *cranked, cref_t f, uint8_t * name, cref_t * outErr);
int32_t playdate_lua_registerClass(Cranked *cranked, uint8_t * name, lua_reg_32 * reg, lua_val_32 * vals, int32_t isstatic, cref_t * outErr);
void playdate_lua_pushFunction(Cranked *cranked, cref_t f);
int32_t playdate_lua_indexMetatable(Cranked *cranked);
void playdate_lua_stop(Cranked *cranked);
void playdate_lua_start(Cranked *cranked);
int32_t playdate_lua_getArgCount(Cranked *cranked);
int32_t playdate_lua_getArgType(Cranked *cranked, int32_t pos, cref_t * outClass);
int32_t playdate_lua_argIsNil(Cranked *cranked, int32_t pos);
int32_t playdate_lua_getArgBool(Cranked *cranked, int32_t pos);
int32_t playdate_lua_getArgInt(Cranked *cranked, int32_t pos);
float playdate_lua_getArgFloat(Cranked *cranked, int32_t pos);
uint8_t * playdate_lua_getArgString(Cranked *cranked, int32_t pos);
uint8_t * playdate_lua_getArgBytes(Cranked *cranked, int32_t pos, uint32_t * outlen);
void * playdate_lua_getArgObject(Cranked *cranked, int32_t pos, uint8_t * type, cref_t * outud);
LCDBitmap_32 * playdate_lua_getBitmap(Cranked *cranked, int32_t pos);
LCDSprite_32 * playdate_lua_getSprite(Cranked *cranked, int32_t pos);
void playdate_lua_pushNil(Cranked *cranked);
void playdate_lua_pushBool(Cranked *cranked, int32_t val);
void playdate_lua_pushInt(Cranked *cranked, int32_t val);
void playdate_lua_pushFloat(Cranked *cranked, float val);
void playdate_lua_pushString(Cranked *cranked, uint8_t * str);
void playdate_lua_pushBytes(Cranked *cranked, uint8_t * str, uint32_t len);
void playdate_lua_pushBitmap(Cranked *cranked, LCDBitmap_32 * bitmap);
void playdate_lua_pushSprite(Cranked *cranked, LCDSprite_32 * sprite);
LuaUDObject_32 * playdate_lua_pushObject(Cranked *cranked, void * obj, uint8_t * type, int32_t nValues);
LuaUDObject_32 * playdate_lua_retainObject(Cranked *cranked, LuaUDObject_32 * obj);
void playdate_lua_releaseObject(Cranked *cranked, LuaUDObject_32 * obj);
void playdate_lua_setUserValue(Cranked *cranked, LuaUDObject_32 * obj, uint32_t slot);
int32_t playdate_lua_getUserValue(Cranked *cranked, LuaUDObject_32 * obj, uint32_t slot);
void playdate_lua_callFunction_deprecated(Cranked *cranked, uint8_t * name, int32_t nargs);
int32_t playdate_lua_callFunction(Cranked *cranked, uint8_t * name, int32_t nargs, cref_t * outerr);
void playdate_json_initEncoder(Cranked *cranked, json_encoder_32 * encoder, cref_t write, void * userdata, int32_t pretty);
int32_t playdate_json_decode(Cranked *cranked, json_decoder_32 * functions, json_reader_32 reader, json_value_32 * outval);
int32_t playdate_json_decodeString(Cranked *cranked, json_decoder_32 * functions, uint8_t * jsonString, json_value_32 * outval);
int32_t playdate_scoreboards_addScore(Cranked *cranked, uint8_t * boardId, uint32_t value, cref_t callback);
int32_t playdate_scoreboards_getPersonalBest(Cranked *cranked, uint8_t * boardId, cref_t callback);
void playdate_scoreboards_freeScore(Cranked *cranked, PDScore_32 * score);
int32_t playdate_scoreboards_getScoreboards(Cranked *cranked, cref_t callback);
void playdate_scoreboards_freeBoardsList(Cranked *cranked, PDBoardsList_32 * boardsList);
int32_t playdate_scoreboards_getScores(Cranked *cranked, uint8_t * boardId, cref_t callback);
void playdate_scoreboards_freeScoresList(Cranked *cranked, PDScoresList_32 * scoresList);
void json_encoder_startArray(Cranked *cranked, json_encoder_32 * encoder);
void json_encoder_addArrayMember(Cranked *cranked, json_encoder_32 * encoder);
void json_encoder_endArray(Cranked *cranked, json_encoder_32 * encoder);
void json_encoder_startTable(Cranked *cranked, json_encoder_32 * encoder);
void json_encoder_addTableMember(Cranked *cranked, json_encoder_32 * encoder, uint8_t * name, int32_t len);
void json_encoder_endTable(Cranked *cranked, json_encoder_32 * encoder);
void json_encoder_writeNull(Cranked *cranked, json_encoder_32 * encoder);
void json_encoder_writeFalse(Cranked *cranked, json_encoder_32 * encoder);
void json_encoder_writeTrue(Cranked *cranked, json_encoder_32 * encoder);
void json_encoder_writeInt(Cranked *cranked, json_encoder_32 * encoder, int32_t num);
void json_encoder_writeDouble(Cranked *cranked, json_encoder_32 * encoder, double num);
void json_encoder_writeString(Cranked *cranked, json_encoder_32 * encoder, uint8_t * str, int32_t len);

}
